require("dotenv").config();
const express    = require("express");
const mongoose   = require("mongoose");
const session    = require("express-session");
const flash      = require("connect-flash");
const Task       = require("./models/task.model.js");
const authRoutes = require("./routes/auth.routes.js");
const bot        = require("./controllers/notification.controller.js"); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è 2FA
const speakeasy = require("speakeasy");
const qrcode    = require("qrcode");

const app = express();
app.set("view engine", "ejs");
app.use(express.urlencoded({ extended: true }));
app.use(express.static("client"));

// üìå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose
  .connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB"))
  .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err));

// üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π –∏ flash-—Å–æ–æ–±—â–µ–Ω–∏–π
app.use(
  session({
    secret: "supersecretkey",
    resave: false,
    saveUninitialized: false
  })
);
app.use(flash());

app.use((req, res, next) => {
  res.locals.success_msg = req.flash("success_msg");
  res.locals.error_msg   = req.flash("error_msg");
  res.locals.user        = req.session.user || null;
  next();
});

// üìå Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const requireAuth = (req, res, next) => {
  if (!req.session.user) {
    req.flash("error_msg", "–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É!");
    return res.redirect("/login");
  }
  next();
};

app.get("/", requireAuth, async (req, res) => {
  try {
    const tasks = await Task.find({ user: req.session.user._id });
    res.render("layout", {
      content: `<h2>üìå –ú–æ–∏ –∑–∞–¥–∞—á–∏</h2>
        <ul>${tasks
          .map(
            task => `
          <li>
            <strong>${task.title}</strong> - ${
              task.deadline ? new Date(task.deadline).toLocaleString() : "–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"
            }
            <a href="/edit/${task._id}">‚úèÔ∏è</a>
            <form action="/delete/${task._id}" method="POST" style="display:inline;">
              <button type="submit">üóë –£–¥–∞–ª–∏—Ç—å</button>
            </form>
          </li>`
          )
          .join("")}
        </ul>
        <a href="/create">‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</a>
        <br>
        <!-- –°—Å—ã–ª–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 2FA (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ) -->
        <a href="/2fa-setup">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å 2FA</a>`
    });
  } catch (err) {
    res.status(500).send("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á");
  }
});

const User = require("./models/user.model.js");

app.get("/2fa-setup", requireAuth, async (req, res) => {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ 2FA
  const user = await User.findById(req.session.user._id);
  console.log(user);
  if (user.twoFAEnabled) {
    req.flash("error_msg", "–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.");
    return res.redirect("/");
  }
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç –¥–ª—è TOTP
  const secret = speakeasy.generateSecret({
    name: `MyApp (${user.email})`
  });
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–∫—Ä–µ—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  req.session.tempTwoFASecret = secret.base32;

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –¥–ª—è otpauth URL
  qrcode.toDataURL(secret.otpauth_url, (err, data_url) => {
    if (err) {
      req.flash("error_msg", "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞.");
      return res.redirect("/");
    }
    res.render("layout", {
      content: `
        <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</h2>
        <p>–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –≤ Google Authenticator –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç –≤—Ä—É—á–Ω—É—é:</p>
        <p><strong>${secret.base32}</strong></p>
        <img src="${data_url}" alt="QR Code">
        <form action="/2fa-setup" method="POST">
          <input type="text" name="token" placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" required>
          <button type="submit">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
        </form>
      `
    });
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 2FA
app.post("/2fa-setup", requireAuth, async (req, res) => {
  const { token } = req.body;
  const tempSecret = req.session.tempTwoFASecret;
  if (!tempSecret) {
    req.flash("error_msg", "–°–µ–∫—Ä–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
    return res.redirect("/2fa-setup");
  }
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π TOTP-–∫–æ–¥
  const verified = speakeasy.totp.verify({
    secret: tempSecret,
    encoding: "base32",
    token: token,
    window: 1
  });
  if (verified) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 2FA –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await User.findByIdAndUpdate(req.session.user._id, {
      twoFAEnabled: true,
      twoFASecret: tempSecret
    });
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
    req.session.user.twoFAEnabled = true;
    req.session.user.twoFASecret  = tempSecret;
    delete req.session.tempTwoFASecret;
    req.flash("success_msg", "–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!");
    return res.redirect("/");
  } else {
    req.flash("error_msg", "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    return res.redirect("/2fa-setup");
  }
});

app.get("/2fa-verify", (req, res) => {
  if (!req.session.tempUser) {
    return res.redirect("/login");
  }
  res.render("layout", {
    content: `
      <h2>–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</h2>
      <form action="/2fa-verify" method="POST">
        <input type="text" name="token" placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Google Authenticator" required>
        <button type="submit">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
      </form>
    `
  });
});

app.post("/2fa-verify", async (req, res) => {
  if (!req.session.tempUser) {
    return res.redirect("/login");
  }
  const token = req.body.token;
  const user = await User.findById(req.session.tempUser._id);
  if (!user || !user.twoFAEnabled || !user.twoFASecret) {
    req.flash("error_msg", "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.");
    return res.redirect("/login");
  }
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º TOTP-–∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è —Å–µ–∫—Ä–µ—Ç –∏–∑ –ë–î
  const verified = speakeasy.totp.verify({
    secret: user.twoFASecret,
    encoding: "base32",
    token: token,
    window: 1
  });
  if (verified) {
    req.session.user = user;
    delete req.session.tempUser;
    req.flash("success_msg", "–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    res.redirect("/");
  } else {
    req.flash("error_msg", "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    res.redirect("/2fa-verify");
  }
});

app.use(authRoutes);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`));
