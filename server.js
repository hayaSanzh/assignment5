require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const session = require("express-session");
const flash = require("connect-flash");
const Task = require("./models/task.model.js");
const authRoutes = require("./routes/auth.routes.js");
const bot = require("./controllers/notification.controller.js"); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞


const app = express();
app.set("view engine", "ejs");
app.use(express.urlencoded({ extended: true }));
app.use(express.static("client"));

// üìå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB"))
    .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err));

// üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π –∏ flash-—Å–æ–æ–±—â–µ–Ω–∏–π
app.use(session({
    secret: "supersecretkey",
    resave: false,
    saveUninitialized: false
}));
app.use(flash());

app.use((req, res, next) => {
    res.locals.success_msg = req.flash("success_msg");
    res.locals.error_msg = req.flash("error_msg");
    res.locals.user = req.session.user || null;
    next();
});

// üìå Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const requireAuth = (req, res, next) => {
    if (!req.session.user) {
        req.flash("error_msg", "–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É!");
        return res.redirect("/login");
    }
    next();
};

// üìå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á)
app.get("/", requireAuth, async (req, res) => {
    try {
        const tasks = await Task.find({ user: req.session.user._id });
        res.render("layout", { content: `<h2>üìå –ú–æ–∏ –∑–∞–¥–∞—á–∏</h2>
            <ul>${tasks.map(task => `
                <li>
                    <strong>${task.title}</strong> - ${task.deadline ? new Date(task.deadline).toLocaleString() : "–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"}
                    <a href="/edit/${task._id}">‚úèÔ∏è</a>
                    <form action="/delete/${task._id}" method="POST" style="display:inline;">
                        <button type="submit">üóë –£–¥–∞–ª–∏—Ç—å</button>
                    </form>
                </li>`).join('')}
            </ul>
            <a href="/create">‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</a>` });
    } catch (err) {
        res.status(500).send("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á");
    }
});

// üìå –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
app.get("/create", requireAuth, (req, res) => {
    res.render("layout", { content: `
        <h2>‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</h2>
        <form action="/tasks" method="POST">
            <input type="text" name="title" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" required>
            <textarea name="description" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"></textarea>
            <label>–î–µ–¥–ª–∞–π–Ω:</label>
            <input type="datetime-local" name="deadline">
            <button type="submit">–°–æ–∑–¥–∞—Ç—å</button>
        </form>` });
});

// üìå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (POST)
app.post("/tasks", requireAuth, async (req, res) => {
    const { title, description, deadline } = req.body;
    await Task.create({ title, description, deadline, user: req.session.user._id });
    req.flash("success_msg", "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
    res.redirect("/");
});

// üìå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
app.post("/delete/:id", requireAuth, async (req, res) => {
    await Task.findOneAndDelete({ _id: req.params.id, user: req.session.user._id });
    req.flash("success_msg", "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!");
    res.redirect("/");
});

// üìå –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
app.get("/register", (req, res) => {
    res.render("layout", { content: `
        <h2>üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
        <form action="/register" method="POST">
            <input type="text" name="username" placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" required>
            <input type="email" name="email" placeholder="Email" required>
            <input type="password" name="password" placeholder="–ü–∞—Ä–æ–ª—å" required>
            <button type="submit">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
        </form>
        <p>–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? <a href="/login">–í–æ–π—Ç–∏</a></p>` });
});

// üìå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞
app.get("/login", (req, res) => {
    res.render("layout", { content: `
        <h2>üîë –í—Ö–æ–¥</h2>
        <form action="/login" method="POST">
            <input type="email" name="email" placeholder="Email" required>
            <input type="password" name="password" placeholder="–ü–∞—Ä–æ–ª—å" required>
            <button type="submit">–í–æ–π—Ç–∏</button>
        </form>
        <p>–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? <a href="/register">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a></p>` });
});

// üìå –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ (GET)
app.get("/edit/:id", requireAuth, async (req, res) => {
    try {
        const task = await Task.findOne({ _id: req.params.id, user: req.session.user._id });
        if (!task) {
            req.flash("error_msg", "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            return res.redirect("/");
        }

        res.render("layout", { content: `
            <h2>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É</h2>
            <form action="/edit/${task._id}" method="POST">
                <input type="text" name="title" value="${task.title}" required>
                <textarea name="description">${task.description}</textarea>
                <label>–î–µ–¥–ª–∞–π–Ω:</label>
                <input type="datetime-local" name="deadline" value="${new Date(task.deadline).toISOString().slice(0, -1)}">
                <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            </form>
        ` });
    } catch (err) {
        res.status(500).send("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á–∏.");
    }
});

// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (POST)
app.post("/edit/:id", requireAuth, async (req, res) => {
    try {
        const { title, description, deadline } = req.body;
        await Task.findOneAndUpdate(
            { _id: req.params.id, user: req.session.user._id },
            { title, description, deadline },
            { new: true }
        );

        req.flash("success_msg", "–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
        res.redirect("/");
    } catch (err) {
        res.status(500).send("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.");
    }
});


// üìå –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.use(authRoutes);

// üìå –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`));
